`include "alu.sv"
`include "regfile.sv"
`include "imem.sv"
`include "dmem.sv"

module datapath(
  input logic iClk,
  input logic iReset,
  input logic iRegWrite,
  input logic iMemWrite,
  input logic [2:0] iALUControl
);

  logic [31:0] Instr, SrcA, ALUResult, ReadData;
  
   // Program Counter (PC)
  logic [31:0] pc;
  always @(posedge iClk or posedge iReset)
    if (iReset)
      pc <= 32'h0;
    else if (iClk)
      pc <= pc + 4;

  // Instantiate modules
  imem IMem (
    .iAddr      (pc),
    .oRdata     (Instr)
  );
  
  
  // Sign Extension
  logic [31:0] signExtended;
  always_comb begin
    signExtended = {{16{Instr[15]}}, Instr[15:0]}; 
  end
  
  regfile RegFile (
    .iClk       (iClk),
    .iReset     (iReset),
    .iRaddr1    (Instr[25:21]),
    .iRaddr2    (iRaddr2),  // You might need to define iRaddr2
    .iWaddr     (Instr[20:16]), 
    .iWe        (iRegWrite),
    .iWdata     (ReadData),
    .oRdata1    (SrcA),
    .oRdata2    (oRdata2)
  );

  alu ALU (
    .iA         (SrcA),
    .iB         (signExtended),
    .iF         (iALUControl),
    .oY         (ALUResult),
    .oZero      (oZero)
  );

  dmem DMem (
    .iClk       (iClk),
    .iWe        (iMemWrite),
    .iAddr      (ALUResult),
    .iWdata     (iWdata),
    .oRdata     (ReadData)
  );

  // Additional logic for control signals and data path connections

endmodule